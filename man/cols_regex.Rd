% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/col_types.R
\name{cols_regex}
\alias{cols_regex}
\title{Create column specification using regular expression matching}
\usage{
cols_regex(..., .default = readr::col_character(), .col_names)
}
\arguments{
\item{...}{Named arguments where the names are (Perl-compatible) regular
expressions and the values are column objects created by col_*(), or
their abbreviated character names (as described in the col_types argument
of \code{\link[readr:read_delim]{readr::read_delim()}}).}

\item{.default}{Any named columns not matched by any of the regular
expressions in \code{...} will be read with this column type.}

\item{.col_names}{The column names which should be matched by \code{...}.}
}
\value{
A \link[readr:cols]{column specification}.
}
\description{
This function allows to define a regular expression per desired
\link[readr:cols]{column specification object} matching the respective column
names.
}
\examples{
\dontrun{
# parse example data
raw_data <- datasource(file = system.file("extdata/ch_communes_snapshot.csv",
                                          package = "readr"))

col_names <- readr:::guess_header(file = raw_data,
                                  tokenizer = tokenizer_csv())$header

read_csv(
  file = raw_data,
  col_types = cols_regex("(Name|_Title|_Text|^ABBREV)" = "c",
                         "^(MutationDate|ValidFrom|ValidTo)$" = col_date(format = "\%d.\%m.\%Y"),
                         .default = "i",
                         .col_names = col_names)
)}
}
